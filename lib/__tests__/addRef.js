"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactTestingLibrary = require("react-testing-library");

require("jest-dom/extend-expect");

var _fp = require("lodash/fp");

var _ = require("..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Generated by CoffeeScript 2.5.0
var Comp, CompWithInitialValue, CompWithInitialValueFromProps;
Comp = (0, _fp.flow)((0, _.addRef)('inputRef'), function (_ref) {
  var inputRef = _ref.inputRef;
  return _react["default"].createElement("div", null, _react["default"].createElement("input", {
    "data-testid": "input",
    ref: inputRef
  }), _react["default"].createElement("button", {
    onClick: function onClick() {
      return inputRef.current.focus();
    }
  }, "update"));
});
CompWithInitialValue = (0, _fp.flow)((0, _.addRef)('inputRef', 'initial'), function (_ref2) {
  var inputRef = _ref2.inputRef;
  return _react["default"].createElement("p", null, inputRef.current);
});
CompWithInitialValueFromProps = (0, _fp.flow)((0, _.addProps)({
  value: 'initial'
}), (0, _.addRef)('inputRef', function (_ref3) {
  var value = _ref3.value;
  return value;
}), function (_ref4) {
  var inputRef = _ref4.inputRef;
  return _react["default"].createElement("p", null, inputRef.current);
});
describe('addRef', function () {
  describe('with no initial value', function () {
    return test('works', function () {
      var getByTestId, getByText;

      var _render = (0, _reactTestingLibrary.render)(_react["default"].createElement(Comp, null));

      getByText = _render.getByText;
      getByTestId = _render.getByTestId;

      _reactTestingLibrary.fireEvent.click(getByText(/update/));

      return expect(document.activeElement).toBe(getByTestId('input'));
    });
  });
  describe('with initial value', function () {
    return test('works', function () {
      var getByText;

      var _render2 = (0, _reactTestingLibrary.render)(_react["default"].createElement(CompWithInitialValue, null));

      getByText = _render2.getByText;
      getByText('initial');
      return void 0;
    });
  });
  return describe('with initial value from props', function () {
    return test('works', function () {
      var getByText;

      var _render3 = (0, _reactTestingLibrary.render)(_react["default"].createElement(CompWithInitialValueFromProps, null));

      getByText = _render3.getByText;
      getByText('initial');
      return void 0;
    });
  });
});