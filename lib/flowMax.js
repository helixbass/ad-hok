"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _addPropTypes = require("./addPropTypes");

var _renderNothing = require("./renderNothing");

var _returns = require("./returns");

var _addWrapper = require("./addWrapper");

var _addWrapperHOC = require("./addWrapperHOC");

var _branchAvoidCircularDependency = require("./branch-avoid-circular-dependency");

var _addDisplayName = _interopRequireWildcard(require("./addDisplayName"));

var _helpers = require("./util/helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// Generated by CoffeeScript 2.5.0
var _flowMax, getArgumentsPropertyName, isFlowMax;

getArgumentsPropertyName = '__ad-hok-flowMax-getArguments';

isFlowMax = function isFlowMax(func) {
  return func[getArgumentsPropertyName];
};

_flowMax = function flowMax() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  var addedDisplayName, displayName, flowLength, func, funcIndex, getFollowingFuncs, getNestedFlowMaxArguments, getPrecedingFuncs, i, len, newFlowMax, newFollowingFlowMax, ref, ret, wrapExistingDisplayName, wrappedDisplayName;

  getPrecedingFuncs = function getPrecedingFuncs(index) {
    if (index === 0) {
      return [];
    } else {
      return funcs.slice(0, index);
    }
  };

  displayName = null;

  getFollowingFuncs = function getFollowingFuncs(index) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$wrappedDisplayNa = _ref.wrappedDisplayName,
        wrappedDisplayName = _ref$wrappedDisplayNa === void 0 ? displayName : _ref$wrappedDisplayNa;

    var followingFuncs;
    followingFuncs = funcs.slice(index + 1);

    if (wrappedDisplayName == null) {
      return followingFuncs;
    }

    return [(0, _addDisplayName["default"])(wrappedDisplayName)].concat(_toConsumableArray(followingFuncs));
  };

  flowLength = (ref = funcs != null ? funcs.length : void 0) != null ? ref : 0;

  wrapExistingDisplayName = function wrapExistingDisplayName(wrapperStr) {
    return "".concat(wrapperStr, "(").concat(displayName != null ? displayName : '', ")");
  };

  if (flowLength) {
    for (funcIndex = i = 0, len = funcs.length; i < len; funcIndex = ++i) {
      func = funcs[funcIndex];

      if (getNestedFlowMaxArguments = isFlowMax(func)) {
        return _flowMax.apply(void 0, _toConsumableArray(getPrecedingFuncs(funcIndex)).concat(_toConsumableArray(getNestedFlowMaxArguments()), _toConsumableArray(getFollowingFuncs(funcIndex))));
      }

      if ((0, _addPropTypes.isAddPropTypes)(func) || (0, _addWrapper.isAddWrapper)(func) || (0, _addWrapperHOC.isAddWrapperHOC)(func) || (0, _branchAvoidCircularDependency.isBranch)(func)) {
        wrappedDisplayName = function () {
          switch (false) {
            case !(0, _addPropTypes.isAddPropTypes)(func):
              return wrapExistingDisplayName('addPropTypes');

            case !(0, _addWrapper.isAddWrapper)(func):
              return wrapExistingDisplayName('addWrapper');

            case !(0, _addWrapperHOC.isAddWrapperHOC)(func):
              return wrapExistingDisplayName('addWrapperHOC');
          }
        }();

        newFollowingFlowMax = _flowMax.apply(void 0, _toConsumableArray(getFollowingFuncs(funcIndex, {
          wrappedDisplayName: wrappedDisplayName
        })));

        if (newFollowingFlowMax.displayName == null || newFollowingFlowMax.displayName === 'ret') {
          newFollowingFlowMax.displayName = wrappedDisplayName;
        }

        newFlowMax = _flowMax.apply(void 0, _toConsumableArray(getPrecedingFuncs(funcIndex)).concat([func(newFollowingFlowMax)])); // Expose original arguments if we're nested

        newFlowMax[getArgumentsPropertyName] = function () {
          return funcs;
        };

        return newFlowMax;
      }

      if (addedDisplayName = (0, _addDisplayName.isAddDisplayName)(func)) {
        displayName = addedDisplayName[0];
      }

      if (!(0, _helpers.isFunction)(func)) {
        throw new TypeError('Expected a function');
      }
    }
  }

  ret = function ret() {
    var currentArgs, index, props, returnsVal;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (!(funcs != null ? funcs.length : void 0)) {
      return args[0];
    }

    index = 0;
    props = null;

    while (index < flowLength) {
      func = funcs[index];
      currentArgs = index === 0 ? args : [props];
      props = func.apply(void 0, _toConsumableArray(currentArgs));

      if ((0, _renderNothing.isRenderNothing)(props)) {
        return null;
      }

      if (returnsVal = (0, _returns.isReturns)(props)) {
        return returnsVal[0];
      }

      index++;
    }

    return props;
  };

  if (displayName != null) {
    ret.displayName = displayName;
  }

  ret[getArgumentsPropertyName] = function () {
    return funcs;
  };

  return ret;
};

var _default = _flowMax;
exports["default"] = _default;