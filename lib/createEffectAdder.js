"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _helpers = require("./util/helpers");

var _usePrevious = _interopRequireDefault(require("./util/usePrevious"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Generated by CoffeeScript 2.5.0
var createEffectAdder, isSimpleDependenciesArray;

isSimpleDependenciesArray = function isSimpleDependenciesArray(dependencies) {
  var element, i, len;

  if (!(0, _helpers.isArray)(dependencies)) {
    return false;
  }

  for (i = 0, len = dependencies.length; i < len; i++) {
    element = dependencies[i];

    if (element.indexOf('.') > -1) {
      return false;
    }
  }

  return true;
};

createEffectAdder = function createEffectAdder(effectHook) {
  return function (callback, dependencies) {
    var isDependenciesArray, isDependenciesNullish, isDependenciesSimpleArray;
    isDependenciesNullish = dependencies == null;
    isDependenciesSimpleArray = !isDependenciesNullish && isSimpleDependenciesArray(dependencies);
    isDependenciesArray = !isDependenciesNullish && (isDependenciesSimpleArray || (0, _helpers.isArray)(dependencies));
    return function (props) {
      var dependencyPropName, prevProps;

      if (isDependenciesNullish) {
        effectHook(callback(props));
      } else if (isDependenciesSimpleArray) {
        // TODO: throw nice error if changeProps isn't array/iterable or any changeProp isn't a string?
        effectHook(callback(props), function () {
          var i, len, results;
          results = [];

          for (i = 0, len = dependencies.length; i < len; i++) {
            dependencyPropName = dependencies[i];
            results.push(props[dependencyPropName]);
          }

          return results;
        }());
      } else {
        prevProps = (0, _usePrevious["default"])(props);

        if (isDependenciesArray) {
          effectHook(function () {
            var dependencyName;

            if (prevProps != null && (0, _helpers.shallowEqualArray)(function () {
              var i, len, results;
              results = [];

              for (i = 0, len = dependencies.length; i < len; i++) {
                dependencyName = dependencies[i];
                results.push((0, _helpers.get)(dependencyName)(prevProps));
              }

              return results;
            }(), function () {
              var i, len, results;
              results = [];

              for (i = 0, len = dependencies.length; i < len; i++) {
                dependencyName = dependencies[i];
                results.push((0, _helpers.get)(dependencyName)(props));
              }

              return results;
            }())) {
              return;
            }

            return callback(props)();
          });
        } else {
          effectHook(function () {
            if (prevProps != null && !dependencies(prevProps, props)) {
              return;
            }

            return callback(props)();
          });
        }
      }

      return props;
    };
  };
};

var _default = createEffectAdder;
exports["default"] = _default;